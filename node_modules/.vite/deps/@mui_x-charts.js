import {
  BarChart,
  BarElement,
  BarElementPath,
  BarPlot,
  ChartsClipPath,
  barElementClasses,
  getBarElementUtilityClass
} from "./chunk-DRCNIR53.js";
import {
  PieArc,
  PieArcLabel,
  PieArcLabelPlot,
  PieArcPlot,
  PieChart,
  PiePlot,
  getPieArcLabelUtilityClass,
  getPieArcUtilityClass,
  getSymbol,
  pieArcClasses,
  pieArcLabelClasses
} from "./chunk-N5AXNLHW.js";
import {
  CartesianContext,
  CartesianContextProvider,
  ChartContainer,
  ChartsAxis,
  ChartsAxisHighlight,
  ChartsAxisHighlightPath,
  ChartsAxisTooltipContent,
  ChartsItemTooltipContent,
  ChartsLegend,
  ChartsLegendRoot,
  ChartsSurface,
  ChartsText,
  ChartsTooltip,
  ChartsXAxis,
  ChartsYAxis,
  DEFAULT_MARGINS,
  DEFAULT_X_AXIS_KEY,
  DEFAULT_Y_AXIS_KEY,
  DefaultChartsAxisTooltipContent,
  DefaultChartsItemTooltipContent,
  DrawingContext,
  DrawingProvider,
  InteractionContext,
  ResponsiveChartContainer,
  SeriesContext,
  Symbol,
  area_default,
  axisClasses,
  blueberryTwilightPalette,
  blueberryTwilightPaletteDark,
  blueberryTwilightPaletteLight,
  catmullRom_default,
  chartsAxisHighlightClasses,
  chartsTooltipClasses,
  cheerfulFiestaPalette,
  cheerfulFiestaPaletteDark,
  cheerfulFiestaPaletteLight,
  color,
  getAxisHighlightUtilityClass,
  getAxisUtilityClass,
  getChartsTooltipUtilityClass,
  getIsFaded,
  getIsHighlighted,
  getLegendUtilityClass,
  getSeriesToDisplay,
  getValueToPositionMapper,
  legendClasses,
  line_default,
  linear_default,
  mangoFusionPalette,
  mangoFusionPaletteDark,
  mangoFusionPaletteLight,
  monotoneX,
  monotoneY,
  natural_default,
  stepAfter,
  stepBefore,
  step_default,
  symbolsFill,
  useInteractionItemProps,
  useXScale,
  useYScale
} from "./chunk-PEIHNAXG.js";
import {
  composeClasses,
  generateUtilityClass,
  generateUtilityClasses,
  styled_default,
  useId,
  useSlotProps
} from "./chunk-WAPVUDP4.js";
import "./chunk-YV3COZNF.js";
import "./chunk-3AVYOY5W.js";
import "./chunk-DBLRT3PM.js";
import {
  _objectWithoutPropertiesLoose
} from "./chunk-HTHQKSPX.js";
import {
  require_prop_types
} from "./chunk-UJTVBTWT.js";
import {
  require_jsx_runtime
} from "./chunk-53TI3G6C.js";
import "./chunk-NQCM2X45.js";
import {
  _extends,
  init_extends
} from "./chunk-ZSOXRXAO.js";
import "./chunk-OBIMC6IO.js";
import {
  require_react
} from "./chunk-64YSJXBX.js";
import {
  __toESM
} from "./chunk-WGAPYIUP.js";

// node_modules/@mui/x-charts/esm/hooks/useDrawingArea.js
var React = __toESM(require_react());
function useDrawingArea() {
  const {
    left,
    top,
    width,
    height,
    bottom,
    right
  } = React.useContext(DrawingContext);
  return React.useMemo(() => ({
    left,
    top,
    width,
    height,
    bottom,
    right
  }), [height, left, top, width, bottom, right]);
}

// node_modules/@mui/x-charts/esm/ChartsReferenceLine/ChartsReferenceLine.js
init_extends();
var React4 = __toESM(require_react());
var import_prop_types = __toESM(require_prop_types());

// node_modules/@mui/x-charts/esm/ChartsReferenceLine/ChartsXReferenceLine.js
init_extends();
var React2 = __toESM(require_react());

// node_modules/@mui/x-charts/esm/ChartsReferenceLine/common.js
init_extends();

// node_modules/@mui/x-charts/esm/ChartsReferenceLine/chartsReferenceLineClasses.js
function getReferenceLineUtilityClass(slot) {
  return generateUtilityClass("MuiChartsReferenceLine", slot);
}
var referenceLineClasses = generateUtilityClasses("MuiChartsReferenceLine", ["root", "vertical", "horizontal", "line", "label"]);

// node_modules/@mui/x-charts/esm/ChartsReferenceLine/common.js
var ReferenceLineRoot = styled_default("g")(({
  theme
}) => ({
  [`& .${referenceLineClasses.line}`]: {
    fill: "none",
    stroke: (theme.vars || theme).palette.text.primary,
    shapeRendering: "crispEdges",
    strokeWidth: 1,
    pointerEvents: "none"
  },
  [`& .${referenceLineClasses.label}`]: _extends({
    fill: (theme.vars || theme).palette.text.primary,
    stroke: "none",
    pointerEvents: "none",
    fontSize: 12
  }, theme.typography.body1)
}));

// node_modules/@mui/x-charts/esm/ChartsReferenceLine/ChartsXReferenceLine.js
var import_jsx_runtime = __toESM(require_jsx_runtime());
var import_jsx_runtime2 = __toESM(require_jsx_runtime());
var getTextParams = ({
  top,
  height,
  spacingY,
  labelAlign = "middle"
}) => {
  switch (labelAlign) {
    case "start":
      return {
        y: top + spacingY,
        style: {
          dominantBaseline: "hanging",
          textAnchor: "start"
        }
      };
    case "end":
      return {
        y: top + height - spacingY,
        style: {
          dominantBaseline: "auto",
          textAnchor: "start"
        }
      };
    default:
      return {
        y: top + height / 2,
        style: {
          dominantBaseline: "central",
          textAnchor: "start"
        }
      };
  }
};
function getXReferenceLineClasses(classes) {
  return composeClasses({
    root: ["root", "vertical"],
    line: ["line"],
    label: ["label"]
  }, getReferenceLineUtilityClass, classes);
}
var warnedOnce = false;
function ChartsXReferenceLine(props) {
  var _spacing$x, _spacing$y;
  const {
    x,
    label = "",
    spacing = 5,
    classes: inClasses,
    labelAlign,
    lineStyle,
    labelStyle,
    axisId
  } = props;
  const {
    top,
    height
  } = useDrawingArea();
  const xAxisScale = useXScale(axisId);
  const xPosition = xAxisScale(x);
  if (xPosition === void 0) {
    if (true) {
      if (!warnedOnce) {
        warnedOnce = true;
        console.error(`MUI X: the value ${x} does not exist in the data of x axis with id ${axisId}.`);
      }
    }
    return null;
  }
  const d = `M ${xPosition} ${top} l 0 ${height}`;
  const classes = getXReferenceLineClasses(inClasses);
  const spacingX = typeof spacing === "object" ? (_spacing$x = spacing.x) != null ? _spacing$x : 0 : spacing;
  const spacingY = typeof spacing === "object" ? (_spacing$y = spacing.y) != null ? _spacing$y : 0 : spacing;
  const textParams = _extends({
    x: xPosition + spacingX,
    text: label,
    fontSize: 12
  }, getTextParams({
    top,
    height,
    spacingY,
    labelAlign
  }), {
    className: classes.label
  });
  return (0, import_jsx_runtime2.jsxs)(ReferenceLineRoot, {
    className: classes.root,
    children: [(0, import_jsx_runtime.jsx)("path", {
      d,
      className: classes.line,
      style: lineStyle
    }), (0, import_jsx_runtime.jsx)(ChartsText, _extends({}, textParams, {
      style: _extends({}, textParams.style, labelStyle)
    }))]
  });
}

// node_modules/@mui/x-charts/esm/ChartsReferenceLine/ChartsYReferenceLine.js
init_extends();
var React3 = __toESM(require_react());
var import_jsx_runtime3 = __toESM(require_jsx_runtime());
var import_jsx_runtime4 = __toESM(require_jsx_runtime());
var getTextParams2 = ({
  left,
  width,
  spacingX,
  labelAlign = "middle"
}) => {
  switch (labelAlign) {
    case "start":
      return {
        x: left + spacingX,
        style: {
          dominantBaseline: "auto",
          textAnchor: "start"
        }
      };
    case "end":
      return {
        x: left + width - spacingX,
        style: {
          dominantBaseline: "auto",
          textAnchor: "end"
        }
      };
    default:
      return {
        x: left + width / 2,
        style: {
          dominantBaseline: "auto",
          textAnchor: "middle"
        }
      };
  }
};
var warnedOnce2 = false;
function getYReferenceLineClasses(classes) {
  return composeClasses({
    root: ["root", "horizontal"],
    line: ["line"],
    label: ["label"]
  }, getReferenceLineUtilityClass, classes);
}
function ChartsYReferenceLine(props) {
  var _spacing$x, _spacing$y;
  const {
    y,
    label = "",
    spacing = 5,
    classes: inClasses,
    labelAlign,
    lineStyle,
    labelStyle,
    axisId
  } = props;
  const {
    left,
    width
  } = useDrawingArea();
  const yAxisScale = useYScale(axisId);
  const yPosition = yAxisScale(y);
  if (yPosition === void 0) {
    if (true) {
      if (!warnedOnce2) {
        warnedOnce2 = true;
        console.error(`MUI X: the value ${y} does not exist in the data of y axis with id ${axisId}.`);
      }
    }
    return null;
  }
  const d = `M ${left} ${yPosition} l ${width} 0`;
  const classes = getYReferenceLineClasses(inClasses);
  const spacingX = typeof spacing === "object" ? (_spacing$x = spacing.x) != null ? _spacing$x : 0 : spacing;
  const spacingY = typeof spacing === "object" ? (_spacing$y = spacing.y) != null ? _spacing$y : 0 : spacing;
  const textParams = _extends({
    y: yPosition - spacingY,
    text: label,
    fontSize: 12
  }, getTextParams2({
    left,
    width,
    spacingX,
    labelAlign
  }), {
    className: classes.label
  });
  return (0, import_jsx_runtime4.jsxs)(ReferenceLineRoot, {
    className: classes.root,
    children: [(0, import_jsx_runtime3.jsx)("path", {
      d,
      className: classes.line,
      style: lineStyle
    }), (0, import_jsx_runtime3.jsx)(ChartsText, _extends({}, textParams, {
      style: _extends({}, textParams.style, labelStyle)
    }))]
  });
}

// node_modules/@mui/x-charts/esm/ChartsReferenceLine/ChartsReferenceLine.js
var import_jsx_runtime5 = __toESM(require_jsx_runtime());
function ChartsReferenceLine(props) {
  const {
    x,
    y
  } = props;
  if (x !== void 0 && y !== void 0) {
    throw new Error("MUI-X-Charts: The ChartsReferenceLine can not have both `x` and `y` props set.");
  }
  if (x === void 0 && y === void 0) {
    throw new Error("MUI-X-Charts: The ChartsReferenceLine should have a value in `x` or `y` prop.");
  }
  if (x !== void 0) {
    return (0, import_jsx_runtime5.jsx)(ChartsXReferenceLine, _extends({}, props));
  }
  return (0, import_jsx_runtime5.jsx)(ChartsYReferenceLine, _extends({}, props));
}
true ? ChartsReferenceLine.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "yarn proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * The id of the axis used for the reference value.
   * @default The `id` of the first defined axis.
   */
  axisId: import_prop_types.default.oneOfType([import_prop_types.default.number, import_prop_types.default.string]),
  /**
   * Override or extend the styles applied to the component.
   */
  classes: import_prop_types.default.object,
  /**
   * The label to display along the reference line.
   */
  label: import_prop_types.default.string,
  /**
   * The alignment if the label is in the chart drawing area.
   * @default 'middle'
   */
  labelAlign: import_prop_types.default.oneOf(["end", "middle", "start"]),
  /**
   * The style applied to the label.
   */
  labelStyle: import_prop_types.default.object,
  /**
   * The style applied to the line.
   */
  lineStyle: import_prop_types.default.object,
  /**
   * Additional space arround the label in px.
   * Can be a number or an object `{ x, y }` to distinguish space with the reference line and space with axes.
   * @default 5
   */
  spacing: import_prop_types.default.oneOfType([import_prop_types.default.number, import_prop_types.default.shape({
    x: import_prop_types.default.number,
    y: import_prop_types.default.number
  })]),
  /**
   * The x value associated with the reference line.
   * If defined the reference line will be vertical.
   */
  x: import_prop_types.default.oneOfType([import_prop_types.default.instanceOf(Date), import_prop_types.default.number, import_prop_types.default.string]),
  /**
   * The y value associated with the reference line.
   * If defined the reference line will be horizontal.
   */
  y: import_prop_types.default.oneOfType([import_prop_types.default.instanceOf(Date), import_prop_types.default.number, import_prop_types.default.string])
} : void 0;

// node_modules/@mui/x-charts/esm/LineChart/LineChart.js
init_extends();
var React13 = __toESM(require_react());
var import_prop_types10 = __toESM(require_prop_types());

// node_modules/@mui/x-charts/esm/LineChart/AreaPlot.js
init_extends();
var React6 = __toESM(require_react());
var import_prop_types3 = __toESM(require_prop_types());

// node_modules/@mui/x-charts/esm/LineChart/AreaElement.js
init_extends();
var React5 = __toESM(require_react());
var import_prop_types2 = __toESM(require_prop_types());
var import_jsx_runtime6 = __toESM(require_jsx_runtime());
var _excluded = ["id", "classes", "color", "highlightScope", "slots", "slotProps"];
function getAreaElementUtilityClass(slot) {
  return generateUtilityClass("MuiAreaElement", slot);
}
var areaElementClasses = generateUtilityClasses("MuiAreaElement", ["root", "highlighted", "faded"]);
var useUtilityClasses = (ownerState) => {
  const {
    classes,
    id,
    isFaded,
    isHighlighted
  } = ownerState;
  const slots = {
    root: ["root", `series-${id}`, isHighlighted && "highlighted", isFaded && "faded"]
  };
  return composeClasses(slots, getAreaElementUtilityClass, classes);
};
var AreaElementPath = styled_default("path", {
  name: "MuiAreaElement",
  slot: "Root",
  overridesResolver: (_, styles) => styles.root
})(({
  ownerState
}) => ({
  stroke: "none",
  fill: ownerState.isHighlighted ? color(ownerState.color).brighter(1).formatHex() : color(ownerState.color).brighter(0.5).formatHex(),
  transition: "opacity 0.2s ease-in, fill 0.2s ease-in",
  opacity: ownerState.isFaded ? 0.3 : 1
}));
AreaElementPath.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "yarn proptypes"  |
  // ----------------------------------------------------------------------
  as: import_prop_types2.default.elementType,
  ownerState: import_prop_types2.default.shape({
    classes: import_prop_types2.default.object,
    color: import_prop_types2.default.string.isRequired,
    id: import_prop_types2.default.string.isRequired,
    isFaded: import_prop_types2.default.bool.isRequired,
    isHighlighted: import_prop_types2.default.bool.isRequired
  }).isRequired,
  sx: import_prop_types2.default.oneOfType([import_prop_types2.default.arrayOf(import_prop_types2.default.oneOfType([import_prop_types2.default.func, import_prop_types2.default.object, import_prop_types2.default.bool])), import_prop_types2.default.func, import_prop_types2.default.object])
};
function AreaElement(props) {
  var _slots$area;
  const {
    id,
    classes: innerClasses,
    color: color2,
    highlightScope,
    slots,
    slotProps
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded);
  const getInteractionItemProps = useInteractionItemProps(highlightScope);
  const {
    item
  } = React5.useContext(InteractionContext);
  const isHighlighted = getIsHighlighted(item, {
    type: "line",
    seriesId: id
  }, highlightScope);
  const isFaded = !isHighlighted && getIsFaded(item, {
    type: "line",
    seriesId: id
  }, highlightScope);
  const ownerState = {
    id,
    classes: innerClasses,
    color: color2,
    isFaded,
    isHighlighted
  };
  const classes = useUtilityClasses(ownerState);
  const Area = (_slots$area = slots == null ? void 0 : slots.area) != null ? _slots$area : AreaElementPath;
  const areaProps = useSlotProps({
    elementType: Area,
    externalSlotProps: slotProps == null ? void 0 : slotProps.area,
    additionalProps: _extends({}, other, getInteractionItemProps({
      type: "line",
      seriesId: id
    }), {
      className: classes.root
    }),
    ownerState
  });
  return (0, import_jsx_runtime6.jsx)(Area, _extends({}, areaProps));
}
true ? AreaElement.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "yarn proptypes"  |
  // ----------------------------------------------------------------------
  classes: import_prop_types2.default.object,
  highlightScope: import_prop_types2.default.shape({
    faded: import_prop_types2.default.oneOf(["global", "none", "series"]),
    highlighted: import_prop_types2.default.oneOf(["item", "none", "series"])
  }),
  id: import_prop_types2.default.oneOfType([import_prop_types2.default.number, import_prop_types2.default.string]).isRequired,
  /**
   * The props used for each component slot.
   * @default {}
   */
  slotProps: import_prop_types2.default.object,
  /**
   * Overridable component slots.
   * @default {}
   */
  slots: import_prop_types2.default.object
} : void 0;

// node_modules/@mui/x-charts/esm/internals/getCurve.js
function getCurveFactory(curveType) {
  switch (curveType) {
    case "catmullRom": {
      return catmullRom_default.alpha(0.5);
    }
    case "linear": {
      return linear_default;
    }
    case "monotoneX": {
      return monotoneX;
    }
    case "monotoneY": {
      return monotoneY;
    }
    case "natural": {
      return natural_default;
    }
    case "step": {
      return step_default;
    }
    case "stepBefore": {
      return stepBefore;
    }
    case "stepAfter": {
      return stepAfter;
    }
    default:
      return monotoneX;
  }
}

// node_modules/@mui/x-charts/esm/LineChart/AreaPlot.js
var import_jsx_runtime7 = __toESM(require_jsx_runtime());
var _excluded2 = ["slots", "slotProps"];
function AreaPlot(props) {
  const {
    slots,
    slotProps
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded2);
  const seriesData = React6.useContext(SeriesContext).line;
  const axisData = React6.useContext(CartesianContext);
  if (seriesData === void 0) {
    return null;
  }
  const {
    series,
    stackingGroups
  } = seriesData;
  const {
    xAxis,
    yAxis,
    xAxisIds,
    yAxisIds
  } = axisData;
  const defaultXAxisId = xAxisIds[0];
  const defaultYAxisId = yAxisIds[0];
  return (0, import_jsx_runtime7.jsx)("g", _extends({}, other, {
    children: stackingGroups.flatMap(({
      ids: groupIds
    }) => {
      return groupIds.flatMap((seriesId) => {
        var _xData$map;
        const {
          xAxisKey = defaultXAxisId,
          yAxisKey = defaultYAxisId,
          stackedData,
          data,
          connectNulls
        } = series[seriesId];
        const xScale = getValueToPositionMapper(xAxis[xAxisKey].scale);
        const yScale = yAxis[yAxisKey].scale;
        const xData = xAxis[xAxisKey].data;
        if (true) {
          if (xData === void 0) {
            throw new Error(`MUI-X-Charts: ${xAxisKey === DEFAULT_X_AXIS_KEY ? "The first `xAxis`" : `The x-axis with id "${xAxisKey}"`} should have data property to be able to display a line plot.`);
          }
          if (xData.length < stackedData.length) {
            throw new Error(`MUI-X-Charts: The data length of the x axis (${xData.length} items) is lower than the length of series (${stackedData.length} items)`);
          }
        }
        const areaPath = area_default().x((d) => xScale(d.x)).defined((_, i) => connectNulls || data[i] != null).y0((d) => d.y && yScale(d.y[0])).y1((d) => d.y && yScale(d.y[1]));
        const curve = getCurveFactory(series[seriesId].curve);
        const formattedData = (_xData$map = xData == null ? void 0 : xData.map((x, index) => ({
          x,
          y: stackedData[index]
        }))) != null ? _xData$map : [];
        const d3Data = connectNulls ? formattedData.filter((_, i) => data[i] != null) : formattedData;
        return !!series[seriesId].area && (0, import_jsx_runtime7.jsx)(AreaElement, {
          id: seriesId,
          d: areaPath.curve(curve)(d3Data) || void 0,
          color: series[seriesId].color,
          highlightScope: series[seriesId].highlightScope,
          slots,
          slotProps
        }, seriesId);
      });
    })
  }));
}
true ? AreaPlot.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "yarn proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * The props used for each component slot.
   * @default {}
   */
  slotProps: import_prop_types3.default.object,
  /**
   * Overridable component slots.
   * @default {}
   */
  slots: import_prop_types3.default.object
} : void 0;

// node_modules/@mui/x-charts/esm/LineChart/LinePlot.js
init_extends();
var React8 = __toESM(require_react());
var import_prop_types5 = __toESM(require_prop_types());

// node_modules/@mui/x-charts/esm/LineChart/LineElement.js
init_extends();
var React7 = __toESM(require_react());
var import_prop_types4 = __toESM(require_prop_types());
var import_jsx_runtime8 = __toESM(require_jsx_runtime());
var _excluded3 = ["id", "classes", "color", "highlightScope", "slots", "slotProps"];
function getLineElementUtilityClass(slot) {
  return generateUtilityClass("MuiLineElement", slot);
}
var lineElementClasses = generateUtilityClasses("MuiLineElement", ["root", "highlighted", "faded"]);
var useUtilityClasses2 = (ownerState) => {
  const {
    classes,
    id,
    isFaded,
    isHighlighted
  } = ownerState;
  const slots = {
    root: ["root", `series-${id}`, isHighlighted && "highlighted", isFaded && "faded"]
  };
  return composeClasses(slots, getLineElementUtilityClass, classes);
};
var LineElementPath = styled_default("path", {
  name: "MuiLineElement",
  slot: "Root",
  overridesResolver: (_, styles) => styles.root
})(({
  ownerState
}) => ({
  strokeWidth: 2,
  strokeLinejoin: "round",
  fill: "none",
  stroke: ownerState.isHighlighted ? color(ownerState.color).brighter(0.5).formatHex() : ownerState.color,
  transition: "opacity 0.2s ease-in, stroke 0.2s ease-in",
  opacity: ownerState.isFaded ? 0.3 : 1
}));
LineElementPath.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "yarn proptypes"  |
  // ----------------------------------------------------------------------
  as: import_prop_types4.default.elementType,
  ownerState: import_prop_types4.default.shape({
    classes: import_prop_types4.default.object,
    color: import_prop_types4.default.string.isRequired,
    id: import_prop_types4.default.string.isRequired,
    isFaded: import_prop_types4.default.bool.isRequired,
    isHighlighted: import_prop_types4.default.bool.isRequired
  }).isRequired,
  sx: import_prop_types4.default.oneOfType([import_prop_types4.default.arrayOf(import_prop_types4.default.oneOfType([import_prop_types4.default.func, import_prop_types4.default.object, import_prop_types4.default.bool])), import_prop_types4.default.func, import_prop_types4.default.object])
};
function LineElement(props) {
  var _slots$line;
  const {
    id,
    classes: innerClasses,
    color: color2,
    highlightScope,
    slots,
    slotProps
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded3);
  const getInteractionItemProps = useInteractionItemProps(highlightScope);
  const {
    item
  } = React7.useContext(InteractionContext);
  const isHighlighted = getIsHighlighted(item, {
    type: "line",
    seriesId: id
  }, highlightScope);
  const isFaded = !isHighlighted && getIsFaded(item, {
    type: "line",
    seriesId: id
  }, highlightScope);
  const ownerState = {
    id,
    classes: innerClasses,
    color: color2,
    isFaded,
    isHighlighted
  };
  const classes = useUtilityClasses2(ownerState);
  const Line = (_slots$line = slots == null ? void 0 : slots.line) != null ? _slots$line : LineElementPath;
  const lineProps = useSlotProps({
    elementType: Line,
    externalSlotProps: slotProps == null ? void 0 : slotProps.line,
    additionalProps: _extends({}, other, getInteractionItemProps({
      type: "line",
      seriesId: id
    }), {
      className: classes.root
    }),
    ownerState
  });
  return (0, import_jsx_runtime8.jsx)(Line, _extends({}, lineProps));
}
true ? LineElement.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "yarn proptypes"  |
  // ----------------------------------------------------------------------
  classes: import_prop_types4.default.object,
  highlightScope: import_prop_types4.default.shape({
    faded: import_prop_types4.default.oneOf(["global", "none", "series"]),
    highlighted: import_prop_types4.default.oneOf(["item", "none", "series"])
  }),
  id: import_prop_types4.default.oneOfType([import_prop_types4.default.number, import_prop_types4.default.string]).isRequired,
  /**
   * The props used for each component slot.
   * @default {}
   */
  slotProps: import_prop_types4.default.object,
  /**
   * Overridable component slots.
   * @default {}
   */
  slots: import_prop_types4.default.object
} : void 0;

// node_modules/@mui/x-charts/esm/LineChart/LinePlot.js
var import_jsx_runtime9 = __toESM(require_jsx_runtime());
var _excluded4 = ["slots", "slotProps"];
function LinePlot(props) {
  const {
    slots,
    slotProps
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded4);
  const seriesData = React8.useContext(SeriesContext).line;
  const axisData = React8.useContext(CartesianContext);
  if (seriesData === void 0) {
    return null;
  }
  const {
    series,
    stackingGroups
  } = seriesData;
  const {
    xAxis,
    yAxis,
    xAxisIds,
    yAxisIds
  } = axisData;
  const defaultXAxisId = xAxisIds[0];
  const defaultYAxisId = yAxisIds[0];
  return (0, import_jsx_runtime9.jsx)("g", _extends({}, other, {
    children: stackingGroups.flatMap(({
      ids: groupIds
    }) => {
      return groupIds.flatMap((seriesId) => {
        var _xData$map;
        const {
          xAxisKey = defaultXAxisId,
          yAxisKey = defaultYAxisId,
          stackedData,
          data,
          connectNulls
        } = series[seriesId];
        const xScale = getValueToPositionMapper(xAxis[xAxisKey].scale);
        const yScale = yAxis[yAxisKey].scale;
        const xData = xAxis[xAxisKey].data;
        if (true) {
          if (xData === void 0) {
            throw new Error(`MUI-X-Charts: ${xAxisKey === DEFAULT_X_AXIS_KEY ? "The first `xAxis`" : `The x-axis with id "${xAxisKey}"`} should have data property to be able to display a line plot`);
          }
          if (xData.length < stackedData.length) {
            throw new Error(`MUI-X-Charts: The data length of the x axis (${xData.length} items) is lower than the length of series (${stackedData.length} items)`);
          }
        }
        const linePath = line_default().x((d) => xScale(d.x)).defined((_, i) => connectNulls || data[i] != null).y((d) => yScale(d.y[1]));
        const curve = getCurveFactory(series[seriesId].curve);
        const formattedData = (_xData$map = xData == null ? void 0 : xData.map((x, index) => ({
          x,
          y: stackedData[index]
        }))) != null ? _xData$map : [];
        const d3Data = connectNulls ? formattedData.filter((_, i) => data[i] != null) : formattedData;
        return (0, import_jsx_runtime9.jsx)(LineElement, {
          id: seriesId,
          d: linePath.curve(curve)(d3Data) || void 0,
          color: series[seriesId].color,
          highlightScope: series[seriesId].highlightScope,
          slots,
          slotProps
        }, seriesId);
      });
    })
  }));
}
true ? LinePlot.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "yarn proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * The props used for each component slot.
   * @default {}
   */
  slotProps: import_prop_types5.default.object,
  /**
   * Overridable component slots.
   * @default {}
   */
  slots: import_prop_types5.default.object
} : void 0;

// node_modules/@mui/x-charts/esm/LineChart/MarkPlot.js
init_extends();
var React10 = __toESM(require_react());
var import_prop_types7 = __toESM(require_prop_types());

// node_modules/@mui/x-charts/esm/LineChart/MarkElement.js
init_extends();
var React9 = __toESM(require_react());
var import_prop_types6 = __toESM(require_prop_types());
var import_jsx_runtime10 = __toESM(require_jsx_runtime());
var _excluded5 = ["x", "y", "id", "classes", "color", "shape", "dataIndex", "highlightScope"];
function getMarkElementUtilityClass(slot) {
  return generateUtilityClass("MuiMarkElement", slot);
}
var markElementClasses = generateUtilityClasses("MuiMarkElement", ["root", "highlighted", "faded"]);
var useUtilityClasses3 = (ownerState) => {
  const {
    classes,
    id,
    isFaded,
    isHighlighted
  } = ownerState;
  const slots = {
    root: ["root", `series-${id}`, isHighlighted && "highlighted", isFaded && "faded"]
  };
  return composeClasses(slots, getMarkElementUtilityClass, classes);
};
var MarkElementPath = styled_default("path", {
  name: "MuiMarkElement",
  slot: "Root",
  overridesResolver: (_, styles) => styles.root
})(({
  ownerState,
  theme
}) => ({
  transform: `translate(${ownerState.x}px, ${ownerState.y}px)`,
  transformOrigin: `${ownerState.x}px ${ownerState.y}px`,
  fill: (theme.vars || theme).palette.background.paper,
  stroke: ownerState.color,
  strokeWidth: 2
}));
MarkElementPath.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "yarn proptypes"  |
  // ----------------------------------------------------------------------
  as: import_prop_types6.default.elementType,
  ownerState: import_prop_types6.default.shape({
    classes: import_prop_types6.default.object,
    color: import_prop_types6.default.string.isRequired,
    id: import_prop_types6.default.string.isRequired,
    isFaded: import_prop_types6.default.bool.isRequired,
    isHighlighted: import_prop_types6.default.bool.isRequired,
    x: import_prop_types6.default.number.isRequired,
    y: import_prop_types6.default.number.isRequired
  }).isRequired,
  sx: import_prop_types6.default.oneOfType([import_prop_types6.default.arrayOf(import_prop_types6.default.oneOfType([import_prop_types6.default.func, import_prop_types6.default.object, import_prop_types6.default.bool])), import_prop_types6.default.func, import_prop_types6.default.object])
};
function MarkElement(props) {
  var _axis$x;
  const {
    x,
    y,
    id,
    classes: innerClasses,
    color: color2,
    shape,
    dataIndex,
    highlightScope
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded5);
  const getInteractionItemProps = useInteractionItemProps(highlightScope);
  const {
    item,
    axis
  } = React9.useContext(InteractionContext);
  const isHighlighted = ((_axis$x = axis.x) == null ? void 0 : _axis$x.index) === dataIndex || getIsHighlighted(item, {
    type: "line",
    seriesId: id
  }, highlightScope);
  const isFaded = !isHighlighted && getIsFaded(item, {
    type: "line",
    seriesId: id
  }, highlightScope);
  const ownerState = {
    id,
    classes: innerClasses,
    isHighlighted,
    isFaded,
    color: color2,
    x,
    y
  };
  const classes = useUtilityClasses3(ownerState);
  return (0, import_jsx_runtime10.jsx)(MarkElementPath, _extends({}, other, {
    ownerState,
    className: classes.root,
    d: Symbol(symbolsFill[getSymbol(shape)])()
  }, getInteractionItemProps({
    type: "line",
    seriesId: id,
    dataIndex
  })));
}
true ? MarkElement.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "yarn proptypes"  |
  // ----------------------------------------------------------------------
  classes: import_prop_types6.default.object,
  /**
   * The index to the element in the series' data array.
   */
  dataIndex: import_prop_types6.default.number.isRequired,
  highlightScope: import_prop_types6.default.shape({
    faded: import_prop_types6.default.oneOf(["global", "none", "series"]),
    highlighted: import_prop_types6.default.oneOf(["item", "none", "series"])
  }),
  id: import_prop_types6.default.oneOfType([import_prop_types6.default.number, import_prop_types6.default.string]).isRequired,
  /**
   * The shape of the marker.
   */
  shape: import_prop_types6.default.oneOf(["circle", "cross", "diamond", "square", "star", "triangle", "wye"]).isRequired
} : void 0;

// node_modules/@mui/x-charts/esm/LineChart/MarkPlot.js
var import_jsx_runtime11 = __toESM(require_jsx_runtime());
var _excluded6 = ["slots", "slotProps"];
function MarkPlot(props) {
  var _slots$mark;
  const {
    slots,
    slotProps
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded6);
  const seriesData = React10.useContext(SeriesContext).line;
  const axisData = React10.useContext(CartesianContext);
  const Mark = (_slots$mark = slots == null ? void 0 : slots.mark) != null ? _slots$mark : MarkElement;
  if (seriesData === void 0) {
    return null;
  }
  const {
    series,
    stackingGroups
  } = seriesData;
  const {
    xAxis,
    yAxis,
    xAxisIds,
    yAxisIds
  } = axisData;
  const defaultXAxisId = xAxisIds[0];
  const defaultYAxisId = yAxisIds[0];
  return (0, import_jsx_runtime11.jsx)("g", _extends({}, other, {
    children: stackingGroups.flatMap(({
      ids: groupIds
    }) => {
      return groupIds.flatMap((seriesId) => {
        const {
          xAxisKey = defaultXAxisId,
          yAxisKey = defaultYAxisId,
          stackedData,
          data,
          showMark = true
        } = series[seriesId];
        if (showMark === false) {
          return null;
        }
        const xScale = getValueToPositionMapper(xAxis[xAxisKey].scale);
        const yScale = yAxis[yAxisKey].scale;
        const xData = xAxis[xAxisKey].data;
        const xRange = xAxis[xAxisKey].scale.range();
        const yRange = yScale.range();
        const isInRange = ({
          x,
          y
        }) => {
          if (x < Math.min(...xRange) || x > Math.max(...xRange)) {
            return false;
          }
          if (y < Math.min(...yRange) || y > Math.max(...yRange)) {
            return false;
          }
          return true;
        };
        if (xData === void 0) {
          throw new Error(`MUI-X-Charts: ${xAxisKey === DEFAULT_X_AXIS_KEY ? "The first `xAxis`" : `The x-axis with id "${xAxisKey}"`} should have data property to be able to display a line plot`);
        }
        return xData == null ? void 0 : xData.map((x, index) => {
          const value = data[index] == null ? null : stackedData[index][1];
          return {
            x: xScale(x),
            y: value === null ? null : yScale(value),
            position: x,
            value,
            index
          };
        }).filter(({
          x,
          y,
          index,
          position,
          value
        }) => {
          if (value === null || y === null) {
            return false;
          }
          if (!isInRange({
            x,
            y
          })) {
            return false;
          }
          if (showMark === true) {
            return true;
          }
          return showMark({
            x,
            y,
            index,
            position,
            value
          });
        }).map(({
          x,
          y,
          index
        }) => {
          return (0, import_jsx_runtime11.jsx)(Mark, _extends({
            id: seriesId,
            dataIndex: index,
            shape: "circle",
            color: series[seriesId].color,
            x,
            y,
            highlightScope: series[seriesId].highlightScope
          }, slotProps == null ? void 0 : slotProps.mark), `${seriesId}-${index}`);
        });
      });
    })
  }));
}
true ? MarkPlot.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "yarn proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * The props used for each component slot.
   * @default {}
   */
  slotProps: import_prop_types7.default.object,
  /**
   * Overridable component slots.
   * @default {}
   */
  slots: import_prop_types7.default.object
} : void 0;

// node_modules/@mui/x-charts/esm/LineChart/LineHighlightPlot.js
init_extends();
var React12 = __toESM(require_react());
var import_prop_types9 = __toESM(require_prop_types());

// node_modules/@mui/x-charts/esm/LineChart/LineHighlightElement.js
init_extends();
var React11 = __toESM(require_react());
var import_prop_types8 = __toESM(require_prop_types());
var import_jsx_runtime12 = __toESM(require_jsx_runtime());
var _excluded7 = ["x", "y", "id", "classes", "color"];
function getHighlightElementUtilityClass(slot) {
  return generateUtilityClass("MuiHighlightElement", slot);
}
var lineHighlightElementClasses = generateUtilityClasses("MuiHighlightElement", ["root"]);
var useUtilityClasses4 = (ownerState) => {
  const {
    classes,
    id
  } = ownerState;
  const slots = {
    root: ["root", `series-${id}`]
  };
  return composeClasses(slots, getHighlightElementUtilityClass, classes);
};
var HighlightElement = styled_default("circle", {
  name: "MuiHighlightElement",
  slot: "Root",
  overridesResolver: (_, styles) => styles.root
})(({
  ownerState
}) => ({
  transform: `translate(${ownerState.x}px, ${ownerState.y}px)`,
  transformOrigin: `${ownerState.x}px ${ownerState.y}px`,
  fill: ownerState.color
}));
function LineHighlightElement(props) {
  const {
    x,
    y,
    id,
    classes: innerClasses,
    color: color2
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded7);
  const ownerState = {
    id,
    classes: innerClasses,
    color: color2,
    x,
    y
  };
  const classes = useUtilityClasses4(ownerState);
  return (0, import_jsx_runtime12.jsx)(HighlightElement, _extends({}, other, {
    ownerState,
    className: classes.root,
    cx: 0,
    cy: 0,
    r: other.r === void 0 ? 5 : other.r
  }));
}
true ? LineHighlightElement.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "yarn proptypes"  |
  // ----------------------------------------------------------------------
  classes: import_prop_types8.default.object,
  id: import_prop_types8.default.oneOfType([import_prop_types8.default.number, import_prop_types8.default.string]).isRequired
} : void 0;

// node_modules/@mui/x-charts/esm/LineChart/LineHighlightPlot.js
var import_jsx_runtime13 = __toESM(require_jsx_runtime());
var _excluded8 = ["slots", "slotProps"];
function LineHighlightPlot(props) {
  var _axis$x, _slots$lineHighlight;
  const {
    slots,
    slotProps
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded8);
  const seriesData = React12.useContext(SeriesContext).line;
  const axisData = React12.useContext(CartesianContext);
  const {
    axis
  } = React12.useContext(InteractionContext);
  const highlightedIndex = (_axis$x = axis.x) == null ? void 0 : _axis$x.index;
  if (highlightedIndex === void 0) {
    return null;
  }
  if (seriesData === void 0) {
    return null;
  }
  const {
    series,
    stackingGroups
  } = seriesData;
  const {
    xAxis,
    yAxis,
    xAxisIds,
    yAxisIds
  } = axisData;
  const defaultXAxisId = xAxisIds[0];
  const defaultYAxisId = yAxisIds[0];
  const Element = (_slots$lineHighlight = slots == null ? void 0 : slots.lineHighlight) != null ? _slots$lineHighlight : LineHighlightElement;
  return (0, import_jsx_runtime13.jsx)("g", _extends({}, other, {
    children: stackingGroups.flatMap(({
      ids: groupIds
    }) => {
      return groupIds.flatMap((seriesId) => {
        const {
          xAxisKey = defaultXAxisId,
          yAxisKey = defaultYAxisId,
          stackedData,
          data,
          disableHighlight
        } = series[seriesId];
        if (disableHighlight || data[highlightedIndex] == null) {
          return null;
        }
        const xScale = getValueToPositionMapper(xAxis[xAxisKey].scale);
        const yScale = yAxis[yAxisKey].scale;
        const xData = xAxis[xAxisKey].data;
        if (xData === void 0) {
          throw new Error(`MUI-X-Charts: ${xAxisKey === DEFAULT_X_AXIS_KEY ? "The first `xAxis`" : `The x-axis with id "${xAxisKey}"`} should have data property to be able to display a line plot.`);
        }
        const x = xScale(xData[highlightedIndex]);
        const y = yScale(stackedData[highlightedIndex][1]);
        return (0, import_jsx_runtime13.jsx)(Element, _extends({
          id: seriesId,
          color: series[seriesId].color,
          x,
          y
        }, slotProps == null ? void 0 : slotProps.lineHighlight), `${seriesId}`);
      });
    })
  }));
}
true ? LineHighlightPlot.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "yarn proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * The props used for each component slot.
   * @default {}
   */
  slotProps: import_prop_types9.default.object,
  /**
   * Overridable component slots.
   * @default {}
   */
  slots: import_prop_types9.default.object
} : void 0;

// node_modules/@mui/x-charts/esm/LineChart/LineChart.js
var import_jsx_runtime14 = __toESM(require_jsx_runtime());
var import_jsx_runtime15 = __toESM(require_jsx_runtime());
var LineChart = React13.forwardRef(function LineChart2(props, ref) {
  const {
    xAxis,
    yAxis,
    series,
    width,
    height,
    margin,
    colors,
    dataset,
    sx,
    tooltip,
    axisHighlight = {
      x: "line"
    },
    disableLineItemHighlight,
    legend,
    topAxis,
    leftAxis,
    rightAxis,
    bottomAxis,
    children,
    slots,
    slotProps
  } = props;
  const id = useId();
  const clipPathId = `${id}-clip-path`;
  return (0, import_jsx_runtime15.jsxs)(ResponsiveChartContainer, {
    ref,
    series: series.map((s) => _extends({
      disableHighlight: !!disableLineItemHighlight,
      type: "line"
    }, s)),
    width,
    height,
    margin,
    xAxis: xAxis != null ? xAxis : [{
      id: DEFAULT_X_AXIS_KEY,
      scaleType: "point",
      data: Array.from({
        length: Math.max(...series.map((s) => {
          var _ref, _s$data;
          return ((_ref = (_s$data = s.data) != null ? _s$data : dataset) != null ? _ref : []).length;
        }))
      }, (_, index) => index)
    }],
    yAxis,
    colors,
    dataset,
    sx,
    disableAxisListener: (tooltip == null ? void 0 : tooltip.trigger) !== "axis" && (axisHighlight == null ? void 0 : axisHighlight.x) === "none" && (axisHighlight == null ? void 0 : axisHighlight.y) === "none",
    children: [(0, import_jsx_runtime15.jsxs)("g", {
      clipPath: `url(#${clipPathId})`,
      children: [(0, import_jsx_runtime14.jsx)(AreaPlot, {
        slots,
        slotProps
      }), (0, import_jsx_runtime14.jsx)(LinePlot, {
        slots,
        slotProps
      })]
    }), (0, import_jsx_runtime14.jsx)(ChartsAxis, {
      topAxis,
      leftAxis,
      rightAxis,
      bottomAxis,
      slots,
      slotProps
    }), (0, import_jsx_runtime14.jsx)(ChartsAxisHighlight, _extends({}, axisHighlight)), (0, import_jsx_runtime14.jsx)(MarkPlot, {
      slots,
      slotProps
    }), (0, import_jsx_runtime14.jsx)(LineHighlightPlot, {
      slots,
      slotProps
    }), (0, import_jsx_runtime14.jsx)(ChartsLegend, _extends({}, legend, {
      slots,
      slotProps
    })), (0, import_jsx_runtime14.jsx)(ChartsTooltip, _extends({}, tooltip, {
      slots,
      slotProps
    })), (0, import_jsx_runtime14.jsx)(ChartsClipPath, {
      id: clipPathId
    }), children]
  });
});
true ? LineChart.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "yarn proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * Object `{ x, y }` that defines how the charts highlight the mouse position along the x- and y-axes.
   * The two properties accept the following values:
   * - 'none': display nothing.
   * - 'line': display a line at the current mouse position.
   * - 'band': display a band at the current mouse position. Only available with band scale.
   * @default { x: 'line' }
   */
  axisHighlight: import_prop_types10.default.shape({
    x: import_prop_types10.default.oneOf(["band", "line", "none"]),
    y: import_prop_types10.default.oneOf(["band", "line", "none"])
  }),
  /**
   * Indicate which axis to display the bottom of the charts.
   * Can be a string (the id of the axis) or an object `ChartsXAxisProps`.
   * @default xAxisIds[0] The id of the first provided axis
   */
  bottomAxis: import_prop_types10.default.oneOfType([import_prop_types10.default.shape({
    axisId: import_prop_types10.default.oneOfType([import_prop_types10.default.number, import_prop_types10.default.string]),
    classes: import_prop_types10.default.object,
    disableLine: import_prop_types10.default.bool,
    disableTicks: import_prop_types10.default.bool,
    fill: import_prop_types10.default.string,
    label: import_prop_types10.default.string,
    labelFontSize: import_prop_types10.default.number,
    labelStyle: import_prop_types10.default.object,
    position: import_prop_types10.default.oneOf(["bottom", "top"]),
    slotProps: import_prop_types10.default.object,
    slots: import_prop_types10.default.object,
    stroke: import_prop_types10.default.string,
    tickFontSize: import_prop_types10.default.number,
    tickInterval: import_prop_types10.default.oneOfType([import_prop_types10.default.oneOf(["auto"]), import_prop_types10.default.array, import_prop_types10.default.func]),
    tickLabelInterval: import_prop_types10.default.oneOfType([import_prop_types10.default.oneOf(["auto"]), import_prop_types10.default.func]),
    tickLabelStyle: import_prop_types10.default.object,
    tickMaxStep: import_prop_types10.default.number,
    tickMinStep: import_prop_types10.default.number,
    tickNumber: import_prop_types10.default.number,
    tickSize: import_prop_types10.default.number
  }), import_prop_types10.default.string]),
  children: import_prop_types10.default.node,
  className: import_prop_types10.default.string,
  /**
   * Color palette used to colorize multiple series.
   * @default blueberryTwilightPalette
   */
  colors: import_prop_types10.default.oneOfType([import_prop_types10.default.arrayOf(import_prop_types10.default.string), import_prop_types10.default.func]),
  /**
   * An array of objects that can be used to populate series and axes data using their `dataKey` property.
   */
  dataset: import_prop_types10.default.arrayOf(import_prop_types10.default.object),
  desc: import_prop_types10.default.string,
  /**
   * If `true`, the charts will not listen to the mouse move event.
   * It might break interactive features, but will improve performance.
   * @default false
   */
  disableAxisListener: import_prop_types10.default.bool,
  /**
   * If `true`, render the line highlight item.
   */
  disableLineItemHighlight: import_prop_types10.default.bool,
  /**
   * The height of the chart in px. If not defined, it takes the height of the parent element.
   * @default undefined
   */
  height: import_prop_types10.default.number,
  /**
   * Indicate which axis to display the left of the charts.
   * Can be a string (the id of the axis) or an object `ChartsYAxisProps`.
   * @default yAxisIds[0] The id of the first provided axis
   */
  leftAxis: import_prop_types10.default.oneOfType([import_prop_types10.default.shape({
    axisId: import_prop_types10.default.oneOfType([import_prop_types10.default.number, import_prop_types10.default.string]),
    classes: import_prop_types10.default.object,
    disableLine: import_prop_types10.default.bool,
    disableTicks: import_prop_types10.default.bool,
    fill: import_prop_types10.default.string,
    label: import_prop_types10.default.string,
    labelFontSize: import_prop_types10.default.number,
    labelStyle: import_prop_types10.default.object,
    position: import_prop_types10.default.oneOf(["left", "right"]),
    slotProps: import_prop_types10.default.object,
    slots: import_prop_types10.default.object,
    stroke: import_prop_types10.default.string,
    tickFontSize: import_prop_types10.default.number,
    tickInterval: import_prop_types10.default.oneOfType([import_prop_types10.default.oneOf(["auto"]), import_prop_types10.default.array, import_prop_types10.default.func]),
    tickLabelInterval: import_prop_types10.default.oneOfType([import_prop_types10.default.oneOf(["auto"]), import_prop_types10.default.func]),
    tickLabelStyle: import_prop_types10.default.object,
    tickMaxStep: import_prop_types10.default.number,
    tickMinStep: import_prop_types10.default.number,
    tickNumber: import_prop_types10.default.number,
    tickSize: import_prop_types10.default.number
  }), import_prop_types10.default.string]),
  /**
   * @deprecated Consider using `slotProps.legend` instead.
   */
  legend: import_prop_types10.default.shape({
    classes: import_prop_types10.default.object,
    direction: import_prop_types10.default.oneOf(["column", "row"]),
    hidden: import_prop_types10.default.bool,
    position: import_prop_types10.default.shape({
      horizontal: import_prop_types10.default.oneOf(["left", "middle", "right"]).isRequired,
      vertical: import_prop_types10.default.oneOf(["bottom", "middle", "top"]).isRequired
    }),
    slotProps: import_prop_types10.default.object,
    slots: import_prop_types10.default.object
  }),
  /**
   * The margin between the SVG and the drawing area.
   * It's used for leaving some space for extra information such as the x- and y-axis or legend.
   * Accepts an object with the optional properties: `top`, `bottom`, `left`, and `right`.
   * @default object Depends on the charts type.
   */
  margin: import_prop_types10.default.shape({
    bottom: import_prop_types10.default.number,
    left: import_prop_types10.default.number,
    right: import_prop_types10.default.number,
    top: import_prop_types10.default.number
  }),
  /**
   * Indicate which axis to display the right of the charts.
   * Can be a string (the id of the axis) or an object `ChartsYAxisProps`.
   * @default null
   */
  rightAxis: import_prop_types10.default.oneOfType([import_prop_types10.default.shape({
    axisId: import_prop_types10.default.oneOfType([import_prop_types10.default.number, import_prop_types10.default.string]),
    classes: import_prop_types10.default.object,
    disableLine: import_prop_types10.default.bool,
    disableTicks: import_prop_types10.default.bool,
    fill: import_prop_types10.default.string,
    label: import_prop_types10.default.string,
    labelFontSize: import_prop_types10.default.number,
    labelStyle: import_prop_types10.default.object,
    position: import_prop_types10.default.oneOf(["left", "right"]),
    slotProps: import_prop_types10.default.object,
    slots: import_prop_types10.default.object,
    stroke: import_prop_types10.default.string,
    tickFontSize: import_prop_types10.default.number,
    tickInterval: import_prop_types10.default.oneOfType([import_prop_types10.default.oneOf(["auto"]), import_prop_types10.default.array, import_prop_types10.default.func]),
    tickLabelInterval: import_prop_types10.default.oneOfType([import_prop_types10.default.oneOf(["auto"]), import_prop_types10.default.func]),
    tickLabelStyle: import_prop_types10.default.object,
    tickMaxStep: import_prop_types10.default.number,
    tickMinStep: import_prop_types10.default.number,
    tickNumber: import_prop_types10.default.number,
    tickSize: import_prop_types10.default.number
  }), import_prop_types10.default.string]),
  series: import_prop_types10.default.arrayOf(import_prop_types10.default.shape({
    area: import_prop_types10.default.bool,
    color: import_prop_types10.default.string,
    connectNulls: import_prop_types10.default.bool,
    curve: import_prop_types10.default.oneOf(["catmullRom", "linear", "monotoneX", "monotoneY", "natural", "step", "stepAfter", "stepBefore"]),
    data: import_prop_types10.default.arrayOf(import_prop_types10.default.number),
    dataKey: import_prop_types10.default.string,
    disableHighlight: import_prop_types10.default.bool,
    highlightScope: import_prop_types10.default.shape({
      faded: import_prop_types10.default.oneOf(["global", "none", "series"]),
      highlighted: import_prop_types10.default.oneOf(["item", "none", "series"])
    }),
    id: import_prop_types10.default.oneOfType([import_prop_types10.default.number, import_prop_types10.default.string]),
    label: import_prop_types10.default.string,
    showMark: import_prop_types10.default.oneOfType([import_prop_types10.default.func, import_prop_types10.default.bool]),
    stack: import_prop_types10.default.string,
    stackOffset: import_prop_types10.default.oneOf(["diverging", "expand", "none", "silhouette", "wiggle"]),
    stackOrder: import_prop_types10.default.oneOf(["appearance", "ascending", "descending", "insideOut", "none", "reverse"]),
    type: import_prop_types10.default.oneOf(["line"]),
    valueFormatter: import_prop_types10.default.func,
    xAxisKey: import_prop_types10.default.string,
    yAxisKey: import_prop_types10.default.string
  })).isRequired,
  /**
   * The props used for each component slot.
   * @default {}
   */
  slotProps: import_prop_types10.default.object,
  /**
   * Overridable component slots.
   * @default {}
   */
  slots: import_prop_types10.default.object,
  sx: import_prop_types10.default.oneOfType([import_prop_types10.default.arrayOf(import_prop_types10.default.oneOfType([import_prop_types10.default.func, import_prop_types10.default.object, import_prop_types10.default.bool])), import_prop_types10.default.func, import_prop_types10.default.object]),
  title: import_prop_types10.default.string,
  tooltip: import_prop_types10.default.shape({
    axisContent: import_prop_types10.default.elementType,
    classes: import_prop_types10.default.object,
    itemContent: import_prop_types10.default.elementType,
    slotProps: import_prop_types10.default.object,
    slots: import_prop_types10.default.object,
    trigger: import_prop_types10.default.oneOf(["axis", "item", "none"])
  }),
  /**
   * Indicate which axis to display the top of the charts.
   * Can be a string (the id of the axis) or an object `ChartsXAxisProps`.
   * @default null
   */
  topAxis: import_prop_types10.default.oneOfType([import_prop_types10.default.shape({
    axisId: import_prop_types10.default.oneOfType([import_prop_types10.default.number, import_prop_types10.default.string]),
    classes: import_prop_types10.default.object,
    disableLine: import_prop_types10.default.bool,
    disableTicks: import_prop_types10.default.bool,
    fill: import_prop_types10.default.string,
    label: import_prop_types10.default.string,
    labelFontSize: import_prop_types10.default.number,
    labelStyle: import_prop_types10.default.object,
    position: import_prop_types10.default.oneOf(["bottom", "top"]),
    slotProps: import_prop_types10.default.object,
    slots: import_prop_types10.default.object,
    stroke: import_prop_types10.default.string,
    tickFontSize: import_prop_types10.default.number,
    tickInterval: import_prop_types10.default.oneOfType([import_prop_types10.default.oneOf(["auto"]), import_prop_types10.default.array, import_prop_types10.default.func]),
    tickLabelInterval: import_prop_types10.default.oneOfType([import_prop_types10.default.oneOf(["auto"]), import_prop_types10.default.func]),
    tickLabelStyle: import_prop_types10.default.object,
    tickMaxStep: import_prop_types10.default.number,
    tickMinStep: import_prop_types10.default.number,
    tickNumber: import_prop_types10.default.number,
    tickSize: import_prop_types10.default.number
  }), import_prop_types10.default.string]),
  viewBox: import_prop_types10.default.shape({
    height: import_prop_types10.default.number,
    width: import_prop_types10.default.number,
    x: import_prop_types10.default.number,
    y: import_prop_types10.default.number
  }),
  /**
   * The width of the chart in px. If not defined, it takes the width of the parent element.
   * @default undefined
   */
  width: import_prop_types10.default.number,
  /**
   * The configuration of the x-axes.
   * If not provided, a default axis config is used with id set to `DEFAULT_X_AXIS_KEY`.
   */
  xAxis: import_prop_types10.default.arrayOf(import_prop_types10.default.shape({
    axisId: import_prop_types10.default.oneOfType([import_prop_types10.default.number, import_prop_types10.default.string]),
    classes: import_prop_types10.default.object,
    data: import_prop_types10.default.array,
    dataKey: import_prop_types10.default.string,
    disableLine: import_prop_types10.default.bool,
    disableTicks: import_prop_types10.default.bool,
    fill: import_prop_types10.default.string,
    hideTooltip: import_prop_types10.default.bool,
    id: import_prop_types10.default.oneOfType([import_prop_types10.default.number, import_prop_types10.default.string]),
    label: import_prop_types10.default.string,
    labelFontSize: import_prop_types10.default.number,
    labelStyle: import_prop_types10.default.object,
    max: import_prop_types10.default.oneOfType([import_prop_types10.default.instanceOf(Date), import_prop_types10.default.number]),
    min: import_prop_types10.default.oneOfType([import_prop_types10.default.instanceOf(Date), import_prop_types10.default.number]),
    position: import_prop_types10.default.oneOf(["bottom", "left", "right", "top"]),
    reverse: import_prop_types10.default.bool,
    scaleType: import_prop_types10.default.oneOf(["band", "linear", "log", "point", "pow", "sqrt", "time", "utc"]),
    slotProps: import_prop_types10.default.object,
    slots: import_prop_types10.default.object,
    stroke: import_prop_types10.default.string,
    tickFontSize: import_prop_types10.default.number,
    tickInterval: import_prop_types10.default.oneOfType([import_prop_types10.default.oneOf(["auto"]), import_prop_types10.default.array, import_prop_types10.default.func]),
    tickLabelInterval: import_prop_types10.default.oneOfType([import_prop_types10.default.oneOf(["auto"]), import_prop_types10.default.func]),
    tickLabelStyle: import_prop_types10.default.object,
    tickMaxStep: import_prop_types10.default.number,
    tickMinStep: import_prop_types10.default.number,
    tickNumber: import_prop_types10.default.number,
    tickSize: import_prop_types10.default.number,
    valueFormatter: import_prop_types10.default.func
  })),
  /**
   * The configuration of the y-axes.
   * If not provided, a default axis config is used with id set to `DEFAULT_Y_AXIS_KEY`.
   */
  yAxis: import_prop_types10.default.arrayOf(import_prop_types10.default.shape({
    axisId: import_prop_types10.default.oneOfType([import_prop_types10.default.number, import_prop_types10.default.string]),
    classes: import_prop_types10.default.object,
    data: import_prop_types10.default.array,
    dataKey: import_prop_types10.default.string,
    disableLine: import_prop_types10.default.bool,
    disableTicks: import_prop_types10.default.bool,
    fill: import_prop_types10.default.string,
    hideTooltip: import_prop_types10.default.bool,
    id: import_prop_types10.default.oneOfType([import_prop_types10.default.number, import_prop_types10.default.string]),
    label: import_prop_types10.default.string,
    labelFontSize: import_prop_types10.default.number,
    labelStyle: import_prop_types10.default.object,
    max: import_prop_types10.default.oneOfType([import_prop_types10.default.instanceOf(Date), import_prop_types10.default.number]),
    min: import_prop_types10.default.oneOfType([import_prop_types10.default.instanceOf(Date), import_prop_types10.default.number]),
    position: import_prop_types10.default.oneOf(["bottom", "left", "right", "top"]),
    reverse: import_prop_types10.default.bool,
    scaleType: import_prop_types10.default.oneOf(["band", "linear", "log", "point", "pow", "sqrt", "time", "utc"]),
    slotProps: import_prop_types10.default.object,
    slots: import_prop_types10.default.object,
    stroke: import_prop_types10.default.string,
    tickFontSize: import_prop_types10.default.number,
    tickInterval: import_prop_types10.default.oneOfType([import_prop_types10.default.oneOf(["auto"]), import_prop_types10.default.array, import_prop_types10.default.func]),
    tickLabelInterval: import_prop_types10.default.oneOfType([import_prop_types10.default.oneOf(["auto"]), import_prop_types10.default.func]),
    tickLabelStyle: import_prop_types10.default.object,
    tickMaxStep: import_prop_types10.default.number,
    tickMinStep: import_prop_types10.default.number,
    tickNumber: import_prop_types10.default.number,
    tickSize: import_prop_types10.default.number,
    valueFormatter: import_prop_types10.default.func
  }))
} : void 0;

// node_modules/@mui/x-charts/esm/ScatterChart/ScatterChart.js
init_extends();
var React16 = __toESM(require_react());
var import_prop_types13 = __toESM(require_prop_types());

// node_modules/@mui/x-charts/esm/ScatterChart/ScatterPlot.js
init_extends();
var React15 = __toESM(require_react());
var import_prop_types12 = __toESM(require_prop_types());

// node_modules/@mui/x-charts/esm/ScatterChart/Scatter.js
init_extends();
var React14 = __toESM(require_react());
var import_prop_types11 = __toESM(require_prop_types());
var import_jsx_runtime16 = __toESM(require_jsx_runtime());
function Scatter(props) {
  const {
    series,
    xScale,
    yScale,
    color: color2,
    markerSize
  } = props;
  const {
    item
  } = React14.useContext(InteractionContext);
  const getInteractionItemProps = useInteractionItemProps(series.highlightScope);
  const cleanData = React14.useMemo(() => {
    const getXPosition = getValueToPositionMapper(xScale);
    const getYPosition = getValueToPositionMapper(yScale);
    const xRange = xScale.range();
    const yRange = yScale.range();
    const minXRange = Math.min(...xRange);
    const maxXRange = Math.max(...xRange);
    const minYRange = Math.min(...yRange);
    const maxYRange = Math.max(...yRange);
    const temp = [];
    for (let i = 0; i < series.data.length; i += 1) {
      const scatterPoint = series.data[i];
      const x = getXPosition(scatterPoint.x);
      const y = getYPosition(scatterPoint.y);
      const isInRange = x >= minXRange && x <= maxXRange && y >= minYRange && y <= maxYRange;
      const pointCtx = {
        type: "scatter",
        seriesId: series.id,
        dataIndex: i
      };
      if (isInRange) {
        temp.push({
          x,
          y,
          isFaded: !getIsHighlighted(item, pointCtx, series.highlightScope) && getIsFaded(item, pointCtx, series.highlightScope),
          interactionProps: getInteractionItemProps(pointCtx),
          id: scatterPoint.id
        });
      }
    }
    return temp;
  }, [yScale, xScale, getInteractionItemProps, item, series.data, series.highlightScope, series.id]);
  return (0, import_jsx_runtime16.jsx)("g", {
    children: cleanData.map((dataPoint) => (0, import_jsx_runtime16.jsx)("circle", _extends({
      cx: 0,
      cy: 0,
      r: markerSize,
      transform: `translate(${dataPoint.x}, ${dataPoint.y})`,
      fill: color2,
      opacity: dataPoint.isFaded && 0.3 || 1
    }, dataPoint.interactionProps), dataPoint.id))
  });
}
true ? Scatter.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "yarn proptypes"  |
  // ----------------------------------------------------------------------
  color: import_prop_types11.default.string.isRequired,
  markerSize: import_prop_types11.default.number.isRequired,
  series: import_prop_types11.default.shape({
    color: import_prop_types11.default.string.isRequired,
    data: import_prop_types11.default.arrayOf(import_prop_types11.default.shape({
      id: import_prop_types11.default.oneOfType([import_prop_types11.default.number, import_prop_types11.default.string]).isRequired,
      x: import_prop_types11.default.number.isRequired,
      y: import_prop_types11.default.number.isRequired
    })).isRequired,
    highlightScope: import_prop_types11.default.shape({
      faded: import_prop_types11.default.oneOf(["global", "none", "series"]),
      highlighted: import_prop_types11.default.oneOf(["item", "none", "series"])
    }),
    id: import_prop_types11.default.oneOfType([import_prop_types11.default.number, import_prop_types11.default.string]).isRequired,
    label: import_prop_types11.default.string,
    markerSize: import_prop_types11.default.number,
    type: import_prop_types11.default.oneOf(["scatter"]).isRequired,
    valueFormatter: import_prop_types11.default.func.isRequired,
    xAxisKey: import_prop_types11.default.string,
    yAxisKey: import_prop_types11.default.string
  }).isRequired,
  xScale: import_prop_types11.default.func.isRequired,
  yScale: import_prop_types11.default.func.isRequired
} : void 0;

// node_modules/@mui/x-charts/esm/ScatterChart/ScatterPlot.js
var import_jsx_runtime17 = __toESM(require_jsx_runtime());
function ScatterPlot(props) {
  var _slots$scatter;
  const {
    slots,
    slotProps
  } = props;
  const seriesData = React15.useContext(SeriesContext).scatter;
  const axisData = React15.useContext(CartesianContext);
  if (seriesData === void 0) {
    return null;
  }
  const {
    series,
    seriesOrder
  } = seriesData;
  const {
    xAxis,
    yAxis,
    xAxisIds,
    yAxisIds
  } = axisData;
  const defaultXAxisId = xAxisIds[0];
  const defaultYAxisId = yAxisIds[0];
  const ScatterItems = (_slots$scatter = slots == null ? void 0 : slots.scatter) != null ? _slots$scatter : Scatter;
  return (0, import_jsx_runtime17.jsx)(React15.Fragment, {
    children: seriesOrder.map((seriesId) => {
      const {
        id,
        xAxisKey,
        yAxisKey,
        markerSize,
        color: color2
      } = series[seriesId];
      const xScale = xAxis[xAxisKey != null ? xAxisKey : defaultXAxisId].scale;
      const yScale = yAxis[yAxisKey != null ? yAxisKey : defaultYAxisId].scale;
      return (0, import_jsx_runtime17.jsx)(ScatterItems, _extends({
        xScale,
        yScale,
        color: color2,
        markerSize: markerSize != null ? markerSize : 4,
        series: series[seriesId]
      }, slotProps == null ? void 0 : slotProps.scatter), id);
    })
  });
}
true ? ScatterPlot.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "yarn proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * The props used for each component slot.
   * @default {}
   */
  slotProps: import_prop_types12.default.object,
  /**
   * Overridable component slots.
   * @default {}
   */
  slots: import_prop_types12.default.object
} : void 0;

// node_modules/@mui/x-charts/esm/ScatterChart/ScatterChart.js
var import_jsx_runtime18 = __toESM(require_jsx_runtime());
var import_jsx_runtime19 = __toESM(require_jsx_runtime());
var ScatterChart = React16.forwardRef(function ScatterChart2(props, ref) {
  const {
    xAxis,
    yAxis,
    series,
    tooltip,
    axisHighlight,
    legend,
    width,
    height,
    margin,
    colors,
    sx,
    topAxis,
    leftAxis,
    rightAxis,
    bottomAxis,
    children,
    slots,
    slotProps
  } = props;
  return (0, import_jsx_runtime19.jsxs)(ResponsiveChartContainer, {
    ref,
    series: series.map((s) => _extends({
      type: "scatter"
    }, s)),
    width,
    height,
    margin,
    colors,
    xAxis,
    yAxis,
    sx,
    children: [(0, import_jsx_runtime18.jsx)(ChartsAxis, {
      topAxis,
      leftAxis,
      rightAxis,
      bottomAxis,
      slots,
      slotProps
    }), (0, import_jsx_runtime18.jsx)(ScatterPlot, {
      slots,
      slotProps
    }), (0, import_jsx_runtime18.jsx)(ChartsLegend, _extends({}, legend, {
      slots,
      slotProps
    })), (0, import_jsx_runtime18.jsx)(ChartsAxisHighlight, _extends({
      x: "none",
      y: "none"
    }, axisHighlight)), (0, import_jsx_runtime18.jsx)(ChartsTooltip, _extends({
      trigger: "item"
    }, tooltip)), children]
  });
});
true ? ScatterChart.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "yarn proptypes"  |
  // ----------------------------------------------------------------------
  axisHighlight: import_prop_types13.default.shape({
    x: import_prop_types13.default.oneOf(["band", "line", "none"]),
    y: import_prop_types13.default.oneOf(["band", "line", "none"])
  }),
  /**
   * Indicate which axis to display the bottom of the charts.
   * Can be a string (the id of the axis) or an object `ChartsXAxisProps`.
   * @default xAxisIds[0] The id of the first provided axis
   */
  bottomAxis: import_prop_types13.default.oneOfType([import_prop_types13.default.shape({
    axisId: import_prop_types13.default.oneOfType([import_prop_types13.default.number, import_prop_types13.default.string]),
    classes: import_prop_types13.default.object,
    disableLine: import_prop_types13.default.bool,
    disableTicks: import_prop_types13.default.bool,
    fill: import_prop_types13.default.string,
    label: import_prop_types13.default.string,
    labelFontSize: import_prop_types13.default.number,
    labelStyle: import_prop_types13.default.object,
    position: import_prop_types13.default.oneOf(["bottom", "top"]),
    slotProps: import_prop_types13.default.object,
    slots: import_prop_types13.default.object,
    stroke: import_prop_types13.default.string,
    tickFontSize: import_prop_types13.default.number,
    tickInterval: import_prop_types13.default.oneOfType([import_prop_types13.default.oneOf(["auto"]), import_prop_types13.default.array, import_prop_types13.default.func]),
    tickLabelInterval: import_prop_types13.default.oneOfType([import_prop_types13.default.oneOf(["auto"]), import_prop_types13.default.func]),
    tickLabelStyle: import_prop_types13.default.object,
    tickMaxStep: import_prop_types13.default.number,
    tickMinStep: import_prop_types13.default.number,
    tickNumber: import_prop_types13.default.number,
    tickSize: import_prop_types13.default.number
  }), import_prop_types13.default.string]),
  children: import_prop_types13.default.node,
  className: import_prop_types13.default.string,
  /**
   * Color palette used to colorize multiple series.
   * @default blueberryTwilightPalette
   */
  colors: import_prop_types13.default.oneOfType([import_prop_types13.default.arrayOf(import_prop_types13.default.string), import_prop_types13.default.func]),
  /**
   * An array of objects that can be used to populate series and axes data using their `dataKey` property.
   */
  dataset: import_prop_types13.default.arrayOf(import_prop_types13.default.object),
  desc: import_prop_types13.default.string,
  /**
   * If `true`, the charts will not listen to the mouse move event.
   * It might break interactive features, but will improve performance.
   * @default false
   */
  disableAxisListener: import_prop_types13.default.bool,
  /**
   * The height of the chart in px. If not defined, it takes the height of the parent element.
   * @default undefined
   */
  height: import_prop_types13.default.number,
  /**
   * Indicate which axis to display the left of the charts.
   * Can be a string (the id of the axis) or an object `ChartsYAxisProps`.
   * @default yAxisIds[0] The id of the first provided axis
   */
  leftAxis: import_prop_types13.default.oneOfType([import_prop_types13.default.shape({
    axisId: import_prop_types13.default.oneOfType([import_prop_types13.default.number, import_prop_types13.default.string]),
    classes: import_prop_types13.default.object,
    disableLine: import_prop_types13.default.bool,
    disableTicks: import_prop_types13.default.bool,
    fill: import_prop_types13.default.string,
    label: import_prop_types13.default.string,
    labelFontSize: import_prop_types13.default.number,
    labelStyle: import_prop_types13.default.object,
    position: import_prop_types13.default.oneOf(["left", "right"]),
    slotProps: import_prop_types13.default.object,
    slots: import_prop_types13.default.object,
    stroke: import_prop_types13.default.string,
    tickFontSize: import_prop_types13.default.number,
    tickInterval: import_prop_types13.default.oneOfType([import_prop_types13.default.oneOf(["auto"]), import_prop_types13.default.array, import_prop_types13.default.func]),
    tickLabelInterval: import_prop_types13.default.oneOfType([import_prop_types13.default.oneOf(["auto"]), import_prop_types13.default.func]),
    tickLabelStyle: import_prop_types13.default.object,
    tickMaxStep: import_prop_types13.default.number,
    tickMinStep: import_prop_types13.default.number,
    tickNumber: import_prop_types13.default.number,
    tickSize: import_prop_types13.default.number
  }), import_prop_types13.default.string]),
  /**
   * @deprecated Consider using `slotProps.legend` instead.
   */
  legend: import_prop_types13.default.shape({
    classes: import_prop_types13.default.object,
    direction: import_prop_types13.default.oneOf(["column", "row"]),
    hidden: import_prop_types13.default.bool,
    position: import_prop_types13.default.shape({
      horizontal: import_prop_types13.default.oneOf(["left", "middle", "right"]).isRequired,
      vertical: import_prop_types13.default.oneOf(["bottom", "middle", "top"]).isRequired
    }),
    slotProps: import_prop_types13.default.object,
    slots: import_prop_types13.default.object
  }),
  /**
   * The margin between the SVG and the drawing area.
   * It's used for leaving some space for extra information such as the x- and y-axis or legend.
   * Accepts an object with the optional properties: `top`, `bottom`, `left`, and `right`.
   * @default object Depends on the charts type.
   */
  margin: import_prop_types13.default.shape({
    bottom: import_prop_types13.default.number,
    left: import_prop_types13.default.number,
    right: import_prop_types13.default.number,
    top: import_prop_types13.default.number
  }),
  /**
   * Indicate which axis to display the right of the charts.
   * Can be a string (the id of the axis) or an object `ChartsYAxisProps`.
   * @default null
   */
  rightAxis: import_prop_types13.default.oneOfType([import_prop_types13.default.shape({
    axisId: import_prop_types13.default.oneOfType([import_prop_types13.default.number, import_prop_types13.default.string]),
    classes: import_prop_types13.default.object,
    disableLine: import_prop_types13.default.bool,
    disableTicks: import_prop_types13.default.bool,
    fill: import_prop_types13.default.string,
    label: import_prop_types13.default.string,
    labelFontSize: import_prop_types13.default.number,
    labelStyle: import_prop_types13.default.object,
    position: import_prop_types13.default.oneOf(["left", "right"]),
    slotProps: import_prop_types13.default.object,
    slots: import_prop_types13.default.object,
    stroke: import_prop_types13.default.string,
    tickFontSize: import_prop_types13.default.number,
    tickInterval: import_prop_types13.default.oneOfType([import_prop_types13.default.oneOf(["auto"]), import_prop_types13.default.array, import_prop_types13.default.func]),
    tickLabelInterval: import_prop_types13.default.oneOfType([import_prop_types13.default.oneOf(["auto"]), import_prop_types13.default.func]),
    tickLabelStyle: import_prop_types13.default.object,
    tickMaxStep: import_prop_types13.default.number,
    tickMinStep: import_prop_types13.default.number,
    tickNumber: import_prop_types13.default.number,
    tickSize: import_prop_types13.default.number
  }), import_prop_types13.default.string]),
  series: import_prop_types13.default.arrayOf(import_prop_types13.default.shape({
    color: import_prop_types13.default.string,
    data: import_prop_types13.default.arrayOf(import_prop_types13.default.shape({
      id: import_prop_types13.default.oneOfType([import_prop_types13.default.number, import_prop_types13.default.string]).isRequired,
      x: import_prop_types13.default.number.isRequired,
      y: import_prop_types13.default.number.isRequired
    })).isRequired,
    highlightScope: import_prop_types13.default.shape({
      faded: import_prop_types13.default.oneOf(["global", "none", "series"]),
      highlighted: import_prop_types13.default.oneOf(["item", "none", "series"])
    }),
    id: import_prop_types13.default.oneOfType([import_prop_types13.default.number, import_prop_types13.default.string]),
    label: import_prop_types13.default.string,
    markerSize: import_prop_types13.default.number,
    type: import_prop_types13.default.oneOf(["scatter"]),
    valueFormatter: import_prop_types13.default.func,
    xAxisKey: import_prop_types13.default.string,
    yAxisKey: import_prop_types13.default.string
  })).isRequired,
  /**
   * The props used for each component slot.
   * @default {}
   */
  slotProps: import_prop_types13.default.object,
  /**
   * Overridable component slots.
   * @default {}
   */
  slots: import_prop_types13.default.object,
  sx: import_prop_types13.default.oneOfType([import_prop_types13.default.arrayOf(import_prop_types13.default.oneOfType([import_prop_types13.default.func, import_prop_types13.default.object, import_prop_types13.default.bool])), import_prop_types13.default.func, import_prop_types13.default.object]),
  title: import_prop_types13.default.string,
  tooltip: import_prop_types13.default.shape({
    axisContent: import_prop_types13.default.elementType,
    classes: import_prop_types13.default.object,
    itemContent: import_prop_types13.default.elementType,
    slotProps: import_prop_types13.default.object,
    slots: import_prop_types13.default.object,
    trigger: import_prop_types13.default.oneOf(["axis", "item", "none"])
  }),
  /**
   * Indicate which axis to display the top of the charts.
   * Can be a string (the id of the axis) or an object `ChartsXAxisProps`.
   * @default null
   */
  topAxis: import_prop_types13.default.oneOfType([import_prop_types13.default.shape({
    axisId: import_prop_types13.default.oneOfType([import_prop_types13.default.number, import_prop_types13.default.string]),
    classes: import_prop_types13.default.object,
    disableLine: import_prop_types13.default.bool,
    disableTicks: import_prop_types13.default.bool,
    fill: import_prop_types13.default.string,
    label: import_prop_types13.default.string,
    labelFontSize: import_prop_types13.default.number,
    labelStyle: import_prop_types13.default.object,
    position: import_prop_types13.default.oneOf(["bottom", "top"]),
    slotProps: import_prop_types13.default.object,
    slots: import_prop_types13.default.object,
    stroke: import_prop_types13.default.string,
    tickFontSize: import_prop_types13.default.number,
    tickInterval: import_prop_types13.default.oneOfType([import_prop_types13.default.oneOf(["auto"]), import_prop_types13.default.array, import_prop_types13.default.func]),
    tickLabelInterval: import_prop_types13.default.oneOfType([import_prop_types13.default.oneOf(["auto"]), import_prop_types13.default.func]),
    tickLabelStyle: import_prop_types13.default.object,
    tickMaxStep: import_prop_types13.default.number,
    tickMinStep: import_prop_types13.default.number,
    tickNumber: import_prop_types13.default.number,
    tickSize: import_prop_types13.default.number
  }), import_prop_types13.default.string]),
  viewBox: import_prop_types13.default.shape({
    height: import_prop_types13.default.number,
    width: import_prop_types13.default.number,
    x: import_prop_types13.default.number,
    y: import_prop_types13.default.number
  }),
  /**
   * The width of the chart in px. If not defined, it takes the width of the parent element.
   * @default undefined
   */
  width: import_prop_types13.default.number,
  /**
   * The configuration of the x-axes.
   * If not provided, a default axis config is used with id set to `DEFAULT_X_AXIS_KEY`.
   */
  xAxis: import_prop_types13.default.arrayOf(import_prop_types13.default.shape({
    axisId: import_prop_types13.default.oneOfType([import_prop_types13.default.number, import_prop_types13.default.string]),
    classes: import_prop_types13.default.object,
    data: import_prop_types13.default.array,
    dataKey: import_prop_types13.default.string,
    disableLine: import_prop_types13.default.bool,
    disableTicks: import_prop_types13.default.bool,
    fill: import_prop_types13.default.string,
    hideTooltip: import_prop_types13.default.bool,
    id: import_prop_types13.default.oneOfType([import_prop_types13.default.number, import_prop_types13.default.string]),
    label: import_prop_types13.default.string,
    labelFontSize: import_prop_types13.default.number,
    labelStyle: import_prop_types13.default.object,
    max: import_prop_types13.default.oneOfType([import_prop_types13.default.instanceOf(Date), import_prop_types13.default.number]),
    min: import_prop_types13.default.oneOfType([import_prop_types13.default.instanceOf(Date), import_prop_types13.default.number]),
    position: import_prop_types13.default.oneOf(["bottom", "left", "right", "top"]),
    reverse: import_prop_types13.default.bool,
    scaleType: import_prop_types13.default.oneOf(["band", "linear", "log", "point", "pow", "sqrt", "time", "utc"]),
    slotProps: import_prop_types13.default.object,
    slots: import_prop_types13.default.object,
    stroke: import_prop_types13.default.string,
    tickFontSize: import_prop_types13.default.number,
    tickInterval: import_prop_types13.default.oneOfType([import_prop_types13.default.oneOf(["auto"]), import_prop_types13.default.array, import_prop_types13.default.func]),
    tickLabelInterval: import_prop_types13.default.oneOfType([import_prop_types13.default.oneOf(["auto"]), import_prop_types13.default.func]),
    tickLabelStyle: import_prop_types13.default.object,
    tickMaxStep: import_prop_types13.default.number,
    tickMinStep: import_prop_types13.default.number,
    tickNumber: import_prop_types13.default.number,
    tickSize: import_prop_types13.default.number,
    valueFormatter: import_prop_types13.default.func
  })),
  /**
   * The configuration of the y-axes.
   * If not provided, a default axis config is used with id set to `DEFAULT_Y_AXIS_KEY`.
   */
  yAxis: import_prop_types13.default.arrayOf(import_prop_types13.default.shape({
    axisId: import_prop_types13.default.oneOfType([import_prop_types13.default.number, import_prop_types13.default.string]),
    classes: import_prop_types13.default.object,
    data: import_prop_types13.default.array,
    dataKey: import_prop_types13.default.string,
    disableLine: import_prop_types13.default.bool,
    disableTicks: import_prop_types13.default.bool,
    fill: import_prop_types13.default.string,
    hideTooltip: import_prop_types13.default.bool,
    id: import_prop_types13.default.oneOfType([import_prop_types13.default.number, import_prop_types13.default.string]),
    label: import_prop_types13.default.string,
    labelFontSize: import_prop_types13.default.number,
    labelStyle: import_prop_types13.default.object,
    max: import_prop_types13.default.oneOfType([import_prop_types13.default.instanceOf(Date), import_prop_types13.default.number]),
    min: import_prop_types13.default.oneOfType([import_prop_types13.default.instanceOf(Date), import_prop_types13.default.number]),
    position: import_prop_types13.default.oneOf(["bottom", "left", "right", "top"]),
    reverse: import_prop_types13.default.bool,
    scaleType: import_prop_types13.default.oneOf(["band", "linear", "log", "point", "pow", "sqrt", "time", "utc"]),
    slotProps: import_prop_types13.default.object,
    slots: import_prop_types13.default.object,
    stroke: import_prop_types13.default.string,
    tickFontSize: import_prop_types13.default.number,
    tickInterval: import_prop_types13.default.oneOfType([import_prop_types13.default.oneOf(["auto"]), import_prop_types13.default.array, import_prop_types13.default.func]),
    tickLabelInterval: import_prop_types13.default.oneOfType([import_prop_types13.default.oneOf(["auto"]), import_prop_types13.default.func]),
    tickLabelStyle: import_prop_types13.default.object,
    tickMaxStep: import_prop_types13.default.number,
    tickMinStep: import_prop_types13.default.number,
    tickNumber: import_prop_types13.default.number,
    tickSize: import_prop_types13.default.number,
    valueFormatter: import_prop_types13.default.func
  }))
} : void 0;

// node_modules/@mui/x-charts/esm/SparkLineChart/SparkLineChart.js
init_extends();
var React17 = __toESM(require_react());
var import_prop_types14 = __toESM(require_prop_types());
var import_jsx_runtime20 = __toESM(require_jsx_runtime());
var import_jsx_runtime21 = __toESM(require_jsx_runtime());
var SPARKLINE_DEFAULT_MARGIN = {
  top: 5,
  bottom: 5,
  left: 5,
  right: 5
};
var SparkLineChart = React17.forwardRef(function SparkLineChart2(props, ref) {
  const {
    xAxis,
    width,
    height,
    margin = SPARKLINE_DEFAULT_MARGIN,
    colors,
    sx,
    showTooltip,
    tooltip,
    showHighlight,
    axisHighlight: inAxisHighlight,
    children,
    slots,
    slotProps,
    data,
    plotType = "line",
    valueFormatter = (value) => value === null ? "" : value.toString(),
    area,
    curve = "linear",
    skipAnimation = false
  } = props;
  const defaultXHighlight = showHighlight && plotType === "bar" ? {
    x: "band"
  } : {
    x: "none"
  };
  const axisHighlight = _extends({}, defaultXHighlight, inAxisHighlight);
  return (0, import_jsx_runtime21.jsxs)(ResponsiveChartContainer, {
    ref,
    series: [_extends({
      type: plotType,
      data,
      valueFormatter
    }, plotType === "bar" ? {} : {
      area,
      curve,
      disableHighlight: !showHighlight
    })],
    width,
    height,
    margin,
    xAxis: [_extends({
      id: DEFAULT_X_AXIS_KEY,
      scaleType: plotType === "bar" ? "band" : "point",
      data: Array.from({
        length: data.length
      }, (_, index) => index),
      hideTooltip: xAxis === void 0
    }, xAxis)],
    colors,
    sx,
    disableAxisListener: (!showTooltip || (tooltip == null ? void 0 : tooltip.trigger) !== "axis") && (axisHighlight == null ? void 0 : axisHighlight.x) === "none" && (axisHighlight == null ? void 0 : axisHighlight.y) === "none",
    children: [plotType === "bar" && (0, import_jsx_runtime20.jsx)(BarPlot, {
      skipAnimation,
      slots,
      slotProps,
      sx: {
        shapeRendering: "auto"
      }
    }), plotType === "line" && (0, import_jsx_runtime21.jsxs)(React17.Fragment, {
      children: [(0, import_jsx_runtime20.jsx)(AreaPlot, {
        slots,
        slotProps
      }), (0, import_jsx_runtime20.jsx)(LinePlot, {
        slots,
        slotProps
      }), (0, import_jsx_runtime20.jsx)(LineHighlightPlot, {
        slots,
        slotProps
      })]
    }), (0, import_jsx_runtime20.jsx)(ChartsAxisHighlight, _extends({}, axisHighlight)), showTooltip && (0, import_jsx_runtime20.jsx)(ChartsTooltip, _extends({}, tooltip, {
      slotProps,
      slots
    })), children]
  });
});
true ? SparkLineChart.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "yarn proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * Set to `true` to fill spark line area.
   * Has no effect if plotType='bar'.
   * @default false
   */
  area: import_prop_types14.default.bool,
  axisHighlight: import_prop_types14.default.shape({
    x: import_prop_types14.default.oneOf(["band", "line", "none"]),
    y: import_prop_types14.default.oneOf(["band", "line", "none"])
  }),
  children: import_prop_types14.default.node,
  className: import_prop_types14.default.string,
  /**
   * Color palette used to colorize multiple series.
   * @default blueberryTwilightPalette
   */
  colors: import_prop_types14.default.oneOfType([import_prop_types14.default.arrayOf(import_prop_types14.default.string), import_prop_types14.default.func]),
  /**
   * @default 'linear'
   */
  curve: import_prop_types14.default.oneOf(["catmullRom", "linear", "monotoneX", "monotoneY", "natural", "step", "stepAfter", "stepBefore"]),
  /**
   * Data to plot.
   */
  data: import_prop_types14.default.arrayOf(import_prop_types14.default.number).isRequired,
  /**
   * An array of objects that can be used to populate series and axes data using their `dataKey` property.
   */
  dataset: import_prop_types14.default.arrayOf(import_prop_types14.default.object),
  desc: import_prop_types14.default.string,
  /**
   * If `true`, the charts will not listen to the mouse move event.
   * It might break interactive features, but will improve performance.
   * @default false
   */
  disableAxisListener: import_prop_types14.default.bool,
  /**
   * The height of the chart in px. If not defined, it takes the height of the parent element.
   * @default undefined
   */
  height: import_prop_types14.default.number,
  /**
   * The margin between the SVG and the drawing area.
   * It's used for leaving some space for extra information such as the x- and y-axis or legend.
   * Accepts an object with the optional properties: `top`, `bottom`, `left`, and `right`.
   * @default {
   *   top: 5,
   *   bottom: 5,
   *   left: 5,
   *   right: 5,
   * }
   */
  margin: import_prop_types14.default.shape({
    bottom: import_prop_types14.default.number,
    left: import_prop_types14.default.number,
    right: import_prop_types14.default.number,
    top: import_prop_types14.default.number
  }),
  /**
   * Type of plot used.
   * @default 'line'
   */
  plotType: import_prop_types14.default.oneOf(["bar", "line"]),
  /**
   * Set to `true` to highlight the value.
   * With line, it shows a point.
   * With bar, it shows a highlight band.
   * @default false
   */
  showHighlight: import_prop_types14.default.bool,
  /**
   * Set to `true` to enable the tooltip in the sparkline.
   * @default false
   */
  showTooltip: import_prop_types14.default.bool,
  /**
   * If `true`, bar animations are skiped.
   * @deprecated In v7 animations are skipped for sparkline.
   * @default false
   */
  skipAnimation: import_prop_types14.default.bool,
  /**
   * The props used for each component slot.
   * @default {}
   */
  slotProps: import_prop_types14.default.object,
  /**
   * Overridable component slots.
   * @default {}
   */
  slots: import_prop_types14.default.object,
  sx: import_prop_types14.default.oneOfType([import_prop_types14.default.arrayOf(import_prop_types14.default.oneOfType([import_prop_types14.default.func, import_prop_types14.default.object, import_prop_types14.default.bool])), import_prop_types14.default.func, import_prop_types14.default.object]),
  title: import_prop_types14.default.string,
  tooltip: import_prop_types14.default.shape({
    axisContent: import_prop_types14.default.elementType,
    classes: import_prop_types14.default.object,
    itemContent: import_prop_types14.default.elementType,
    slotProps: import_prop_types14.default.object,
    slots: import_prop_types14.default.object,
    trigger: import_prop_types14.default.oneOf(["axis", "item", "none"])
  }),
  /**
   * Formatter used by the tooltip.
   * @param {number} value The value to format.
   * @returns {string} the formatted value.
   * @default (value: number | null) => (value === null ? '' : value.toString())
   */
  valueFormatter: import_prop_types14.default.func,
  viewBox: import_prop_types14.default.shape({
    height: import_prop_types14.default.number,
    width: import_prop_types14.default.number,
    x: import_prop_types14.default.number,
    y: import_prop_types14.default.number
  }),
  /**
   * The width of the chart in px. If not defined, it takes the width of the parent element.
   * @default undefined
   */
  width: import_prop_types14.default.number,
  /**
   * The xAxis configuration.
   * Notice it is a single configuration object, not an array of configuration.
   */
  xAxis: import_prop_types14.default.shape({
    axisId: import_prop_types14.default.oneOfType([import_prop_types14.default.number, import_prop_types14.default.string]),
    classes: import_prop_types14.default.object,
    data: import_prop_types14.default.array,
    dataKey: import_prop_types14.default.string,
    disableLine: import_prop_types14.default.bool,
    disableTicks: import_prop_types14.default.bool,
    fill: import_prop_types14.default.string,
    hideTooltip: import_prop_types14.default.bool,
    id: import_prop_types14.default.oneOfType([import_prop_types14.default.number, import_prop_types14.default.string]),
    label: import_prop_types14.default.string,
    labelFontSize: import_prop_types14.default.number,
    labelStyle: import_prop_types14.default.object,
    max: import_prop_types14.default.oneOfType([import_prop_types14.default.instanceOf(Date), import_prop_types14.default.number]),
    min: import_prop_types14.default.oneOfType([import_prop_types14.default.instanceOf(Date), import_prop_types14.default.number]),
    position: import_prop_types14.default.oneOf(["bottom", "left", "right", "top"]),
    reverse: import_prop_types14.default.bool,
    scaleType: import_prop_types14.default.oneOf(["band", "linear", "log", "point", "pow", "sqrt", "time", "utc"]),
    slotProps: import_prop_types14.default.object,
    slots: import_prop_types14.default.object,
    stroke: import_prop_types14.default.string,
    tickFontSize: import_prop_types14.default.number,
    tickInterval: import_prop_types14.default.oneOfType([import_prop_types14.default.oneOf(["auto"]), import_prop_types14.default.array, import_prop_types14.default.func]),
    tickLabelInterval: import_prop_types14.default.oneOfType([import_prop_types14.default.oneOf(["auto"]), import_prop_types14.default.func]),
    tickLabelStyle: import_prop_types14.default.object,
    tickMaxStep: import_prop_types14.default.number,
    tickMinStep: import_prop_types14.default.number,
    tickNumber: import_prop_types14.default.number,
    tickSize: import_prop_types14.default.number,
    valueFormatter: import_prop_types14.default.func
  })
} : void 0;
export {
  AreaElement,
  AreaElementPath,
  AreaPlot,
  BarChart,
  BarElement,
  BarElementPath,
  BarPlot,
  CartesianContextProvider,
  ChartContainer,
  ChartsAxis,
  ChartsAxisHighlight,
  ChartsAxisHighlightPath,
  ChartsAxisTooltipContent,
  ChartsClipPath,
  ChartsItemTooltipContent,
  ChartsLegend,
  ChartsLegendRoot,
  ChartsReferenceLine,
  ChartsSurface,
  ChartsText,
  ChartsTooltip,
  ChartsXAxis,
  ChartsYAxis,
  DEFAULT_MARGINS,
  DEFAULT_X_AXIS_KEY,
  DEFAULT_Y_AXIS_KEY,
  DefaultChartsAxisTooltipContent,
  DefaultChartsItemTooltipContent,
  DrawingProvider,
  LineChart,
  LineElement,
  LineElementPath,
  LineHighlightElement,
  LineHighlightPlot,
  LinePlot,
  MarkElement,
  MarkPlot,
  PieArc,
  PieArcLabel,
  PieArcLabelPlot,
  PieArcPlot,
  PieChart,
  PiePlot,
  ResponsiveChartContainer,
  Scatter,
  ScatterChart,
  ScatterPlot,
  SparkLineChart,
  areaElementClasses,
  axisClasses,
  barElementClasses,
  blueberryTwilightPalette,
  blueberryTwilightPaletteDark,
  blueberryTwilightPaletteLight,
  chartsAxisHighlightClasses,
  chartsTooltipClasses,
  cheerfulFiestaPalette,
  cheerfulFiestaPaletteDark,
  cheerfulFiestaPaletteLight,
  getAreaElementUtilityClass,
  getAxisHighlightUtilityClass,
  getAxisUtilityClass,
  getBarElementUtilityClass,
  getChartsTooltipUtilityClass,
  getHighlightElementUtilityClass,
  getLegendUtilityClass,
  getLineElementUtilityClass,
  getMarkElementUtilityClass,
  getPieArcLabelUtilityClass,
  getPieArcUtilityClass,
  getReferenceLineUtilityClass,
  getSeriesToDisplay,
  getValueToPositionMapper,
  legendClasses,
  lineElementClasses,
  lineHighlightElementClasses,
  mangoFusionPalette,
  mangoFusionPaletteDark,
  mangoFusionPaletteLight,
  markElementClasses,
  pieArcClasses,
  pieArcLabelClasses,
  referenceLineClasses,
  useDrawingArea,
  useXScale,
  useYScale
};
//# sourceMappingURL=@mui_x-charts.js.map
